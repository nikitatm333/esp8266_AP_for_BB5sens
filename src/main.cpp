/**
 * @mainpage
 * @brief –ì–ª–∞–≤–Ω–∞—è
 * @file main.cpp
 * @brief –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–æ—à–∏–≤–∫–∏ –¥–ª—è ESP8266, –≤–∫–ª—é—á–∞—é—â–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wi-Fi, –∑–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º.
 * 
 * @details –í –¥–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wi-Fi, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞ (AP) 
 * –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏, –∑–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç.
 * 
 * ## –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏üîó
 * - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞: @ref main.cpp
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ uart: @ref serial_processing.cpp
 * - –í–µ–± –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: @ref web_handlers.cpp
 * - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–Ω–µ—Ä–≥–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –ø–∞–º—è—Ç–∏: @ref settings.cpp
 * - –ê–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ—Ç –≤—Ä–µ–º–µ–Ω–∏: @ref graph.cpp
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: @ref temp_control.cpp
 */

 #include <ESP8266WiFi.h>
 #include <ESP8266WebServer.h>
 #include "../inc/index.h" 
 #include "../inc/graph_page.h"
 #include "../inc/web_handlers.h"
 #include "../inc/settings.h"
 #include "../inc/serial_processing.h"
 #include "../inc/temp_control.h"
 #include "../inc/globals.h"
 #include <EEPROM.h>
 #include <math.h>
 
 // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wi-Fi
 const char* ssid = "INFRATEST";          ///< SSID —Å–µ—Ç–∏ Wi-Fi.
 const char* password = "^I={test}.1206    8";  ///< –ü–∞—Ä–æ–ª—å –æ—Ç Wi-Fi.
 
 // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π 80-—ã–π –ø–æ—Ä—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
 ESP8266WebServer server(80);
 
 /**
  * @brief –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞ (AP).
  * 
  * @details –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ—ë, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wi-Fi –Ω–µ —É–¥–∞–ª–æ—Å—å.
  * –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö SSID –∏–ª–∏ –ø–∞—Ä–æ–ª—è –∑–∞–¥–∞—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
  */
 void startAccessPoint() {
     loadAPSettings();
     
     if (ap_ssid[0] == 0xFF || ap_ssid[0] == '\0') {
         strncpy(ap_ssid, "ESP_AP", sizeof(ap_ssid));
         ap_ssid[sizeof(ap_ssid)-1] = '\0';
         ap_password[0] = '\0';
     }
 
     if (ap_password[0] == '\0' || ap_password[0] == 0xFF) {
         WiFi.softAP(ap_ssid);
     } else {
         WiFi.softAP(ap_ssid, ap_password);
     }
     
     Serial.println("–¢–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–ø—É—â–µ–Ω–∞");
 }
 
 /**
  * @brief –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏ Wi-Fi.
  * 
  * @details –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º —Å—Ç–∞–Ω—Ü–∏–∏ (STA) –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ç–∏. 
  * –í —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞ (AP).
  */
 void connectToWiFi() {
     WiFi.mode(WIFI_STA);  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Å—Ç–∞–Ω—Ü–∏–∏
     WiFi.begin(ssid, password);
     Serial.print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wi-Fi");
 
     unsigned long startAttemptTime = millis(); ///< –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
     const unsigned long wifiTimeout = 10000;   ///< –¢–∞–π–º-–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (10 —Å–µ–∫—É–Ω–¥).
 
     while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < wifiTimeout) {
         delay(500);
         Serial.print(".");
     }
 
     if (WiFi.status() == WL_CONNECTED) {
         Serial.println("\n–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Wi-Fi");
         Serial.print("IP-–∞–¥—Ä–µ—Å: ");
         Serial.println(WiFi.localIP());
     } else {
         Serial.println("\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Wi-Fi. –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ AP...");
         startAccessPoint(); // –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º AP
     }
 }
 
 /**
  * @brief –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
  * 
  * @details –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç, –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Wi-Fi, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, 
  * –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—É—Ñ–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–µ–±-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
  */
 void setup() {
     Serial.begin(115200);
     // clearEEPROM(); // –û—á–∏—Å—Ç–∫–∞ —ç–Ω–µ—Ä–≥–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –ø–∞–º—è—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
     connectToWiFi(); // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wi-Fi
     
     loadSettingsTemp();  ///< –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É.
     loadLastRecvd();     ///< –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –ø–∏—Ç–∞–Ω–∏—è.
     
     // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É—Ñ–µ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞ (–Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
     for (int i = 0; i < L; i++) {
         TStorage[i] = 36.0;
     }
     TShead = 0;
     TStail = 0;
 
     // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–µ–±-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
     initWebHandlers(server);
 
     server.begin();
     Serial.println("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω");
 }
 
 /** 
  * @brief –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã.
  * 
  * @details –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å—ã, –ø–æ—Å—Ç—É–ø–∞—é—â–∏–µ –Ω–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä, —Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
  * –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.
  */
 void loop() {
     server.handleClient();
     processSerialData();
     updateTargetStatus();  ///< –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.
 }
 